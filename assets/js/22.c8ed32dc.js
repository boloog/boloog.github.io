(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{173:function(n,t,e){"use strict";e.r(t);var a=e(0),r=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"常见的6种javascript设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见的6种javascript设计模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 常见的6种JavaScript设计模式")]),n._v(" "),e("h2",{attrs:{id:"构造函数模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 构造函数模式")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/**\n * 构造一个动物的函数 \n */\nfunction Animal(name, color){\n    this.name = name;\n    this.color = color;\n    this.getName = function(){\n        return this.name;\n    }\n}\n// 实例一个对象\nvar cat = new Animal('猫', '白色');\nconsole.log( cat.getName() );\n")])])]),e("h2",{attrs:{id:"工厂模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 工厂模式")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/**\n * 工厂模式\n */\nfunction Animal(opts){\n    var obj = new Object();\n    obj.name = opts.name;\n    obj.color = opts.color;\n    obj.getInfo = function(){\n        return '名称：'+obj.name +'， 颜色：'+ obj.color;\n    }\n    return obj;\n}\nvar cat = Animal({name: '波斯猫', color: '白色'});\ncat.getInfo();\n\n")])])]),e("h2",{attrs:{id:"模块模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模块模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 模块模式")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/**\n * 模块模式 = 封装大部分代码，只暴露必需接口\n */\nvar Car = (function(){\n    var name = '法拉利';\n    function sayName(){\n        console.log( name );\n    }\n    function getColor(name){\n        console.log( name );\n    }\n    return {\n        name: sayName,\n        color: getColor\n    }\n})();\nCar.name();\nCar.color('红色');\n")])])]),e("h2",{attrs:{id:"混合模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混合模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 混合模式")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('/**\n * 混合模式 = 原型模式 + 构造函数模式\n */\nfunction Animal(name, color){\n    this.name = name;\n    this.color = color;\n\n    console.log( this.name  +  this.color)\n}\nAnimal.prototype.getInfo = function(){\n    console.log(\'名称：\'+ this.name);\n}\n\nfunction largeCat(name, color){\n    Animal.call(null, name, color);\n\n    this.color = color;\n}\n\nlargeCat.prototype = create(Animal.prototype);\nfunction create (parentObj){\n    function F(){}\n    F.prototype = parentObj;\n    return new F();\n};\n\nlargeCat.prototype.getColor = function(){\n    return this.color;\n}\nvar cat = new largeCat("Persian", "白色");\nconsole.log( cat )\n\n')])])]),e("h2",{attrs:{id:"单例模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单例模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 单例模式")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/**\n * 在执行当前 Single 只获得唯一一个对象\n */\nvar Single = (function(){\n    var instance;\n    function init() {\n        //define private methods and properties\n        //do something\n        return {\n            //define public methods and properties\n        };\n    }\n\n\treturn {\n\t\t// 获取实例\n\t\tgetInstance:function(){\n            if(!instance){\n                instance = init();\n            }\n            return instance;\n\t\t}\n\t}\n})();\n\nvar obj1 = Single.getInstance();\nvar obj2 = Single.getInstance();\n\nconsole.log(obj1 === obj2);\n")])])]),e("h2",{attrs:{id:"发布订阅模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 发布订阅模式")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/**\n * 发布订阅模式\n */\nvar EventCenter = (function(){\n    var events = {};\n    /*\n    {\n      my_event: [{handler: function(data){xxx}}, {handler: function(data){yyy}}]\n    }\n    */\n    // 绑定事件 添加回调\n    function on(evt, handler){\n        events[evt] = events[evt] || [];\n        events[evt].push({\n            handler:handler\n        })\n    }\n    function fire(evt, arg){\n        if(!events[evt]){\n            return \n        }\n        for(var i=0; i < events[evt].length; i++){\n            events[evt][i].handler(arg);\n        }\n    }\n    function off(evt){\n        delete events[evt];\n    }\n    return {\n        on:on,\n        fire:fire,\n        off:off\n    }\n}());\n\nvar number = 1;\nEventCenter.on('click', function(data){\n    console.log('click 事件' + data + number++ +'次');\n});\nEventCenter.off('click');   //  只绑定一次\nEventCenter.on('click', function(data){\n    console.log('click 事件' + data + number++ +'次');\n});\n\nEventCenter.fire('click', '绑定');\n\n")])])])])}],!1,null,null,null);r.options.__file="javascript-design-pattern.md";t.default=r.exports}}]);